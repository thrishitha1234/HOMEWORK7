# -*- coding: utf-8 -*-
"""ctas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Va92TauSJw6KEbLJwE2klSRpSNAI-agK
"""

from airflow import DAG
from airflow.decorators import task
from airflow.models import Variable
from datetime import datetime
import logging
import snowflake.connector

# Function to establish a Snowflake connection using snowflake.connector
def return_snowflake_conn():
    # Retrieve Snowflake credentials from Airflow Variables
    user_id = Variable.get('snowflake_username')
    password = Variable.get('snowflake_password')
    account = Variable.get('snowflake_account')

    # Establish a connection to Snowflake
    conn = snowflake.connector.connect(
        user=user_id,
        password=password,
        account=account,
        warehouse='compute_wh',
        database='dev',
        schema='raw_data'
    )
    return conn.cursor()

@task
def run_ctas(table, select_sql, primary_key=None):
    logging.info(f"Creating table {table} with query: {select_sql}")

    cur = return_snowflake_conn()

    try:
        cur.execute("BEGIN;")
        sql = f"CREATE OR REPLACE TABLE {table} AS {select_sql}"
        logging.info(sql)
        cur.execute(sql)

        # Check for primary key uniqueness if specified
        if primary_key is not None:
            sql = f"SELECT {primary_key}, COUNT(1) AS cnt FROM {table} GROUP BY 1 ORDER BY 2 DESC LIMIT 1"
            logging.info(sql)
            cur.execute(sql)
            result = cur.fetchone()
            if int(result[1]) > 1:
                raise Exception(f"Primary key uniqueness failed: {result}")

        cur.execute("COMMIT;")
    except Exception as e:
        cur.execute("ROLLBACK;")
        logging.error('Failed to execute SQL. Completed ROLLBACK!')
        raise e
    finally:
        cur.close()

# Define the DAG
with DAG(
    dag_id='BuildELT_CTAS',
    start_date=datetime(2024, 10, 2),
    catchup=False,
    tags=['ELT'],
    schedule_interval='45 2 * * *'  # Run daily at 2:45 AM
) as dag:

    table = "dev.analytics.session_summary"
    select_sql = """SELECT u.*, s.ts
                    FROM dev.raw_data.user_session_channel u
                    JOIN dev.raw_data.session_timestamp s ON u.sessionId=s.sessionId"""

    run_ctas(table, select_sql, primary_key='sessionId')